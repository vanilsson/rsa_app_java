package RSA_app;

import java.math.BigInteger;
import java.util.Scanner;

/**
 * RSA cryptosystem program written by Victor Nilsson, April 2021. This class displays a menu, giving the user the
 * option to generate or supply RSA key pairs, and then the ability to encrypt and decrypt messages using RSA-procedures.
 * Note that this program lacks crucial elements to make it suitable for secure encryption, e.g. a padding scheme.
 */
public class Main {
    static Scanner optionMessageInput = new Scanner(System.in);  // Input that handles Strings. Used for selecting options and entering (potentially encrypted) messages.
    static Scanner keyInput = new Scanner(System.in);  // Input that handles integers. Used for entering keys.
    static String option;
    static boolean exitKeyMenu = false, enterEncryptDecryptMenu = false, exitSupplyKeysMenu = false, exitEncryptDecryptMenu = false;  // Variables used for entering and exiting menus.
    static KeyChain keyChain = new KeyChain();  // Used for storing and verifying keys, which are either supplied by the user or generated by the object.
    static EncryptorDecryptor encryptorDecryptor = new EncryptorDecryptor();  // Used for encrypting and decrypting messages.

    public static void main(String[] args) {
        openKeyMenu();
    }

    /**
     * The first stage in the menu system, presenting the option of generating keys, supplying keys or exiting the program.
     */
    private static void openKeyMenu() {
        while (!exitKeyMenu && !enterEncryptDecryptMenu) {
            System.out.println("\n\n########### MENU ###########");
            System.out.println("1. Generate keys");
            System.out.println("2. Supply own key(s)");
            System.out.println("3. Help");
            System.out.println("0. Exit");
            System.out.println("########### #### ###########");
            System.out.println("Please enter your option: ");
            option = optionMessageInput.nextLine();  // Add exception-handling later.

            if (option.equals("1")) {
                keyChain.generateKeys();
                System.out.println("\nKeys generated!");
                enterEncryptDecryptMenu = true;

            } else if (option.equals("2")) {
                openSupplyKeysMenu();

            } else if (option.equals("3")) {
                help();

            } else if (option.equals("0")) {
                exitKeyMenu = true;

            }else {
                System.out.println("INVALID INPUT!");
            }
        }
        if (enterEncryptDecryptMenu) {
            openEncryptDecryptMenu();
        } else {
            System.out.println("Exiting program ...");
        }
    }

    /**
     * The stage in the menu system which handles the user supplying keys, either both the private and public key pair, or only one of the pairs.
     */
    private static void openSupplyKeysMenu() {
        while (!exitSupplyKeysMenu) {
            System.out.println("\n\n########### MENU ###########\nWhich keys?");
            System.out.println("1. Both keys");
            System.out.println("2. Public keys");
            System.out.println("3. Private keys");
            System.out.println("########### #### ###########");
            System.out.println("Please enter your option: ");
            option = optionMessageInput.nextLine();
            if (option.equals("1")) {
                System.out.println("\nEnter modulus of public/private key, i.e. n of c = m^e mod n");
                keyChain.setN(keyInput.nextBigInteger());
                if (keyChain.getN().compareTo(BigInteger.valueOf(100)) < 0) {  // Equivalent to: if (n < 100).
                    System.out.println("Too small to be secure!");
                } else {
                    System.out.println("\nEnter exponent of public key, i.e. e of c = m^e mod n");
                    keyChain.setE(keyInput.nextBigInteger());
                    System.out.println("\nEnter exponent of private key, i.e. d of m = c^d mod n");
                    keyChain.setD(keyInput.nextBigInteger());
                    if (keyChain.verifyKeys(keyChain.getN(), keyChain.getE(), keyChain.getD())) {
                        System.out.println("Keys verified.");
                        exitSupplyKeysMenu = true;
                    } else {
                        System.out.println("Keys failed verification, please enter new keys.");
                    }
                }
            } else if (option.equals("2")) {
                System.out.println("\nEnter modulus of public/private key, i.e. n of c = m^e mod n");
                keyChain.setN(keyInput.nextBigInteger());
                System.out.println("\nEnter exponent of public key, i.e. e of c = m^e mod n");
                keyChain.setE(keyInput.nextBigInteger());
                if (keyChain.getE().compareTo(keyChain.getN()) >= 0) {  // Equivalent to: if (e >= n). Note that this doesn't verify that the key pair is correct, just that it's not correct.
                    System.out.println("e >= n, which doesn't pass criteria of e < (p-1)(q-1) since n = p*q. Please enter new keys.");
                }
                exitSupplyKeysMenu = true;
            } else if (option.equals("3")) {
                System.out.println("\nEnter modulus of public/private key, i.e. n of c = m^e mod n");
                keyChain.setN(keyInput.nextBigInteger());
                System.out.println("\nEnter exponent of private key, i.e. d of m = c^d mod n");
                keyChain.setD(keyInput.nextBigInteger());
                exitSupplyKeysMenu = true;
            } else {
                System.out.println("INVALID INPUT!");
            }
        }
        enterEncryptDecryptMenu = true;
    }

    /**
     * The last stage in the menu system which handles the encryption and decryption of messages, also giving the option of displaying the key pairs, allowed symbols, getting help, or exiting the program.
     */
    private static void openEncryptDecryptMenu() {
        while (!exitEncryptDecryptMenu) {
            System.out.println("\n\n########### MENU ###########");
            System.out.println("1. Encrypt message");
            System.out.println("2. Decrypt message");
            System.out.println("3. Display keys");
            System.out.println("4. Allowed message symbols");
            System.out.println("5. Help");
            System.out.println("0. Exit");
            System.out.println("########### #### ###########");
            System.out.println("Please enter your option: ");
            option = optionMessageInput.nextLine();

            if (option.equals("1")) {
                System.out.println("\n\n######### MENU #########\nEncrypt with:");
                if (keyChain.getE() != null){
                    System.out.println("1. Public key");
                } else {
                    System.out.println("[1. Public key missing]");
                }
                if (keyChain.getD() != null){
                    System.out.println("2. Private key");
                } else {
                    System.out.println("[2. Private key missing]");
                }
                System.out.println("Please enter option:");
                option = optionMessageInput.nextLine();
                if (option.equals("1") && (keyChain.getE() != null)) {
                    System.out.println("\nEnter message:");
                    String message = optionMessageInput.nextLine();
                    System.out.println("Encrypting ...");
                    String messageEncrypted = encryptorDecryptor.encryptMessageWithPublicKeys(message, keyChain.getE(), keyChain.getN());
                    System.out.println("Encrypted message:\n" + messageEncrypted);

                } else if (option.equals("2") && (keyChain.getD() != null)){
                    System.out.println("\nEnter message:");
                    String message = optionMessageInput.nextLine();
                    System.out.println("Encrypting ...");
                    String messageEncrypted = encryptorDecryptor.encryptMessageWithPrivateKeys(message, keyChain.getD(), keyChain.getN());
                    System.out.println("Encrypted message:\n" + messageEncrypted);
                } else {
                    System.out.println("INVALID OPTION!");
                }

            } else if (option.equals("2")){
                System.out.println("\n\n######### MENU #########\nDecrypt with:");
                if (keyChain.getE() != null){
                    System.out.println("1. Public key");
                } else {
                    System.out.println("[1. Public key missing]");
                }
                if (keyChain.getD() != null){
                    System.out.println("2. Private key");
                } else {
                    System.out.println("[2. Private key missing]");
                }
                System.out.println("Please enter option:");
                option = optionMessageInput.nextLine();
                if (option.equals("1") && (keyChain.getE() != null)) {
                    System.out.println("\nEnter encrypted message:");
                    String encryptedMessage = optionMessageInput.nextLine();
                    System.out.println("Decrypting ...");
                    String decryptedMessage = encryptorDecryptor.decryptMessageWithPublicKeys(encryptedMessage, keyChain.getE(), keyChain.getN());
                    System.out.println("Decrypted message:\n" + decryptedMessage);

                } else if (option.equals("2") && (keyChain.getD() != null)){
                    System.out.println("\nEnter encrypted message:");
                    String encryptedMessage = optionMessageInput.nextLine();
                    System.out.println("Decrypting ...");
                    String decryptedMessage = encryptorDecryptor.decryptMessageWithPrivateKeys(encryptedMessage, keyChain.getD(), keyChain.getN());
                    System.out.println("Decrypted message:\n" + decryptedMessage);
                } else {
                    System.out.println("INVALID OPTION!");
                }
            } else if (option.equals("3")) {
                if (keyChain.getE() != null){
                    System.out.println("\nPublic keypair is (n=" + keyChain.getN() + ", e=" + keyChain.getE() + ")");
                } else {
                    System.out.println("\n");
                }
                if (keyChain.getD() != null){
                    System.out.println("Private keypair is (n=" + keyChain.getN() + ", d=" + keyChain.getD() + ")");
                }
            } else if (option.equals("4")) {
                System.out.println("\nAllowed symbols in message to encrypt:\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789 .,_-!?'<>:;@$&%#|()[]{}=+-*/");
            } else if (option.equals("5")) {
                help();
            } else if (option.equals("0")) {
                exitEncryptDecryptMenu = true;
            }else {
                System.out.println("INVALID OPTION!");
            }
        }
    }

    private static void help() {
        System.out.println("\n########## ########## ########## ########## ######## HELP ######## ########## ########## ########## ##########" +
                "\nThis is an RSA cryptosystem program. You can generate a private and public key pair or supply your own. " +
                "\nAfter this is done, you can enter a message to encrypt or a message to decrypt, display the keys,and " +
                "\ndisplay the allowed symbols in the message that you want to encrypt." +
                "\nRemember that messages encrypted by the public key are decrypted by the private key, and vice versa." +
                "\n########## ########## ########## ########## ##########  ########## ########## ########## ########## ##########");
    }
}